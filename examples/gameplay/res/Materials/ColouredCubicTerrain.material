material ColouredCubicTerrain
{
    technique
    {
        pass
        {
            // shaders
            vertexShader = res/Materials/Shaders/ColouredCubicTerrain.vert
            fragmentShader = res/Materials/Shaders/ColouredCubicTerrain.frag
            
			defines = TEXTURE_REPEAT; SPECULAR; BUMPED
            u_modelToWorldMatrix = WORLD_MATRIX
            u_worldToClipMatrix = VIEW_PROJECTION_MATRIX
			u_inverseTransposeModelToWorldMatrix = INVERSE_TRANSPOSE_WORLD_MATRIX
            
            u_ambientColor = SCENE_AMBIENT_COLOR
            u_worldSpaceCameraPosition = CAMERA_WORLD_POSITION
            
            u_specularExponent = 10
            
            // samplers
            sampler u_diffuseTexture
            {
                path = res/Materials/Textures/noise.png
                mipmap = false
                wrapS = REPEAT
                wrapT = REPEAT
                minFilter = NEAREST
                magFilter = NEAREST
            }
			
			sampler u_depthAndCones
            {
                path = res/Materials/Textures/TestDepthAndCones.png
                mipmap = true
                wrapS = REPEAT
                wrapT = REPEAT

                // Technically we shouldn't use mipmaps with the cone step maps, because they don't filter properly.
                // However, tests have shown that mipmaps are very important to performance and so we make use of them
                // anyway, accepting the artifacts which result. We attempted to create a DDS texture with properly
                // calculated mipmaps but thisdidn't seem to work as expected (and it complicated the content pipeline).
                // Once we've decided that we are going to enable mipmaps and accept the artifacts, linear filtering
                // seems to give the best image.
                minFilter = LINEAR_MIPMAP_LINEAR                
                magFilter = LINEAR
            }
            
            sampler u_normals
            {
                path = res/Materials/Textures/TestNormals.png
                mipmap = true
                wrapS = REPEAT
                wrapT = REPEAT
                minFilter = NEAREST_MIPMAP_LINEAR
                magFilter = LINEAR
            }

            // render state
            renderState
            {
                cullFace = true
                depthTest = true
            }
        }
    }
}